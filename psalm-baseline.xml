<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.9.0@8b9ad1eb9e8b7d3101f949291da2b9f7767cd163">
  <file src="src/AbstractFactory/ConfigAbstractFactory.php">
    <InvalidStringClass>
      <code>new $requestedName(...$arguments)</code>
    </InvalidStringClass>
    <MixedArgument>
      <code>$serviceDependencies</code>
      <code>$serviceDependencies</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$config[self::class]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$config</code>
      <code>$dependencies</code>
    </MixedAssignment>
  </file>
  <file src="src/AbstractFactory/ReflectionBasedAbstractFactory.php">
    <ArgumentTypeCoercion>
      <code>$requestedName</code>
      <code>$requestedName</code>
    </ArgumentTypeCoercion>
    <InvalidStringClass>
      <code>new $requestedName()</code>
      <code>new $requestedName()</code>
      <code>new $requestedName(...$parameters)</code>
    </InvalidStringClass>
    <MissingClosureReturnType>
      <code>function (ReflectionParameter $parameter) use ($container, $requestedName) {</code>
    </MissingClosureReturnType>
    <MixedMethodCall>
      <code>new $requestedName()</code>
      <code>new $requestedName()</code>
      <code>new $requestedName(...$parameters)</code>
    </MixedMethodCall>
    <PossiblyNullArgument>
      <code>$type</code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code>is_string($type)</code>
    </RedundantCondition>
  </file>
  <file src="src/AbstractFactoryInterface.php">
    <PossiblyUnusedMethod>
      <code>canCreateServiceWithName</code>
      <code>createServiceWithName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/AbstractPluginManager.php">
    <ArgumentTypeCoercion>
      <code>$config</code>
      <code>$config</code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code>null|ConfigInterface|ContainerInterface</code>
    </DeprecatedInterface>
    <ImplementedParamTypeMismatch>
      <code>$service</code>
    </ImplementedParamTypeMismatch>
    <MissingReturnType>
      <code>setService</code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code>$service</code>
    </MixedArgumentTypeCoercion>
    <ParamNameMismatch>
      <code>$name</code>
    </ParamNameMismatch>
    <RedundantConditionGivenDocblockType>
      <code>is_object($configInstanceOrParentLocator)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Config.php">
    <DeprecatedInterface>
      <code>Config</code>
    </DeprecatedInterface>
    <LessSpecificReturnStatement>
      <code>ArrayUtils::merge($a, $b)</code>
    </LessSpecificReturnStatement>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$this->allowedKeys[$key]]]></code>
    </MixedArrayTypeCoercion>
    <MoreSpecificReturnType>
      <code>ServiceManagerConfigurationType</code>
    </MoreSpecificReturnType>
    <UnusedProperty>
      <code>$allowedKeys</code>
    </UnusedProperty>
  </file>
  <file src="src/DelegatorFactoryInterface.php">
    <PossiblyUnusedMethod>
      <code>createDelegatorWithName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Exception/CyclicAliasException.php">
    <InvalidArgument>
      <code>self::deDuplicateDetectedCycles($detectedCycles)</code>
    </InvalidArgument>
    <MixedArgumentTypeCoercion>
      <code>$alias</code>
      <code>$detectedCycles</code>
    </MixedArgumentTypeCoercion>
    <PossiblyFalseOperand>
      <code>$cycle</code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Factory/InvokableFactory.php">
    <InvalidStringClass>
      <code>new $requestedName($options)</code>
      <code>new $requestedName()</code>
    </InvalidStringClass>
  </file>
  <file src="src/FactoryInterface.php">
    <UnusedClass>
      <code>FactoryInterface</code>
    </UnusedClass>
  </file>
  <file src="src/InitializerInterface.php">
    <UnusedClass>
      <code>InitializerInterface</code>
    </UnusedClass>
  </file>
  <file src="src/Proxy/LazyServiceFactory.php">
    <MissingClosureParamType>
      <code>$wrappedInstance</code>
    </MissingClosureParamType>
    <MixedAssignment>
      <code>$wrappedInstance</code>
    </MixedAssignment>
  </file>
  <file src="src/ServiceManager.php">
    <InvalidArgument>
      <code><![CDATA[['delegators' => [$name => [$factory]]]]]></code>
      <code><![CDATA[['initializers' => [$initializer]]]]></code>
      <code><![CDATA[['lazy_services' => ['class_map' => [$name => $class ?: $name]]]]]></code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[$this->services[$service]]]></code>
    </InvalidArrayOffset>
    <InvalidCast>
      <code>$service</code>
    </InvalidCast>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->factories]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingClosureReturnType>
      <code>function () use ($name, $options) {</code>
    </MissingClosureReturnType>
    <MissingReturnType>
      <code>addAbstractFactory</code>
      <code>addDelegator</code>
      <code>addInitializer</code>
      <code>mapLazyService</code>
      <code>setAlias</code>
      <code>setAllowOverride</code>
      <code>setInvokableClass</code>
      <code>setService</code>
      <code>setShared</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$abstractFactory</code>
      <code><![CDATA[$config['aliases']]]></code>
      <code><![CDATA[$config['delegators']]]></code>
      <code><![CDATA[$config['delegators']]]></code>
      <code><![CDATA[$config['factories']]]></code>
      <code><![CDATA[$config['initializers']]]></code>
      <code><![CDATA[$config['invokables']]]></code>
      <code><![CDATA[$config['invokables']]]></code>
      <code><![CDATA[$config['lazy_services']]]></code>
      <code><![CDATA[$config['lazy_services']['class_map']]]></code>
      <code><![CDATA[$config['shared']]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$alias</code>
      <code>$alias</code>
      <code>$service</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$this->services[$service]]]></code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$abstractFactories</code>
      <code>$abstractFactory</code>
      <code>$abstractFactory</code>
      <code><![CDATA[$config['aliases']]]></code>
      <code>$key</code>
      <code><![CDATA[$this->aliases]]></code>
      <code><![CDATA[$this->factories]]></code>
      <code><![CDATA[$this->shared]]></code>
      <code><![CDATA[$this->sharedByDefault]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$config['aliases']]]></code>
      <code><![CDATA[$config['aliases'] ?? []]]></code>
      <code><![CDATA[$config['factories']]]></code>
      <code><![CDATA[$config['shared']]]></code>
    </MixedOperand>
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->delegators]]></code>
      <code><![CDATA[$this->factories]]></code>
      <code><![CDATA[$this->initializers]]></code>
    </MixedPropertyTypeCoercion>
    <MixedReturnTypeCoercion>
      <code>$factory</code>
      <code><![CDATA[(callable(ContainerInterface,string,array<mixed>|null):object)|Factory\FactoryInterface]]></code>
    </MixedReturnTypeCoercion>
    <ParamNameMismatch>
      <code>$name</code>
      <code>$name</code>
    </ParamNameMismatch>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
    <TypeDoesNotContainType>
      <code>$sharedAlias</code>
      <code>$sharedAlias</code>
    </TypeDoesNotContainType>
    <UnusedForeachValue>
      <code>$delegatorFactory</code>
      <code>$service</code>
      <code>$target</code>
    </UnusedForeachValue>
    <UnusedReturnValue>
      <code>DelegatorsConfiguration</code>
    </UnusedReturnValue>
    <UnusedVariable>
      <code>$key</code>
    </UnusedVariable>
  </file>
  <file src="src/Test/CommonPluginManagerTrait.php">
    <ArgumentTypeCoercion>
      <code>$expected</code>
      <code><![CDATA[$this->getServiceNotFoundException()]]></code>
      <code><![CDATA[$this->getServiceNotFoundException()]]></code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>testInstanceOfMatches</code>
      <code>testLoadingInvalidElementRaisesException</code>
      <code>testPluginAliasesResolve</code>
      <code>testRegisteringInvalidElementRaisesException</code>
      <code>testShareByDefaultAndSharedByDefault</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$alias</code>
      <code>$expected</code>
      <code>$shareByDefault</code>
      <code>$sharedByDefault</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="src/Tool/ConfigDumper.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code>is_string($className)</code>
    </DocblockTypeContradiction>
    <MissingReturnType>
      <code>validateClassName</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$config['service_manager']]]></code>
      <code><![CDATA[$config['service_manager']['factories']]]></code>
      <code>$key</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$className</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAssignment>
      <code><![CDATA[$config['service_manager']['factories']]]></code>
      <code><![CDATA[$config['service_manager']['factories'][$className]]]></code>
      <code>$config[ConfigAbstractFactory::class][$className]</code>
      <code>$config[ConfigAbstractFactory::class][$className]</code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$dependency</code>
      <code>$key</code>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyNullArgument>
      <code>$key</code>
    </PossiblyNullArgument>
    <UnusedForeachValue>
      <code>$dependency</code>
    </UnusedForeachValue>
  </file>
  <file src="src/Tool/ConfigDumperCommand.php">
    <MixedArgument>
      <code><![CDATA[$arguments->class]]></code>
      <code><![CDATA[$arguments->class]]></code>
      <code><![CDATA[$arguments->config]]></code>
      <code><![CDATA[$arguments->configFile]]></code>
      <code><![CDATA[$arguments->configFile]]></code>
      <code><![CDATA[$arguments->ignoreUnresolved]]></code>
      <code><![CDATA[$arguments->message]]></code>
      <code>$class</code>
      <code>$class</code>
      <code>$configFile</code>
      <code>$configFile</code>
      <code>$configFile</code>
      <code>$configFile</code>
      <code>$configFile</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$arg1</code>
      <code>$arg1</code>
      <code>$configFile</code>
    </MixedAssignment>
    <RedundantCondition>
      <code>false</code>
    </RedundantCondition>
  </file>
  <file src="src/Tool/FactoryCreator.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos($className, '\\')]]></code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Tool/FactoryCreatorCommand.php">
    <MixedArgument>
      <code>$class</code>
      <code>$class</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$arg1</code>
    </MixedAssignment>
  </file>
  <file src="test/AbstractFactory/ConfigAbstractFactoryTest.php">
    <InvalidArgument>
      <code><![CDATA['Holistic']]></code>
    </InvalidArgument>
  </file>
  <file src="test/AbstractFactory/ReflectionBasedAbstractFactoryTest.php">
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/AbstractPluginManagerTest.php">
    <DeprecatedMethod>
      <code>setServiceLocator</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code><![CDATA[[
            'factories'  => [
                stdClass::class => InvokableFactory::class,
            ],
            'delegators' => [
                stdClass::class => [
                    TestAsset\PreDelegator::class,
                    static function ($container, $name, $callback) {
                        $instance      = $callback();
                        $instance->foo = 'bar';

                        return $instance;
                    },
                ],
            ],
        ]]]></code>
      <code>static function ($errno, $errstr): void {
            self::assertEquals(E_USER_DEPRECATED, $errno);
        }</code>
      <code>static function ($errno, $errstr): void {
            self::assertEquals(E_USER_DEPRECATED, $errno);
        }</code>
      <code>static function ($errno, $errstr): void {
            self::assertEquals(E_USER_DEPRECATED, $errno);
        }</code>
      <code>static function ($errno, $errstr): void {
            self::assertEquals(E_USER_DEPRECATED, $errno);
        }</code>
    </InvalidArgument>
    <MissingClosureParamType>
      <code>$callback</code>
      <code>$container</code>
      <code>$name</code>
      <code>$plugin</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($container, $name, $callback) {</code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code>$arg</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$instance</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$callback()</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedPropertyAssignment>
      <code>$instance</code>
    </MixedPropertyAssignment>
    <UnusedClosureParam>
      <code>$container</code>
      <code>$errstr</code>
      <code>$errstr</code>
      <code>$errstr</code>
      <code>$errstr</code>
      <code>$name</code>
    </UnusedClosureParam>
  </file>
  <file src="test/CommonServiceLocatorBehaviorsTrait.php">
    <DeprecatedMethod>
      <code>getServiceLocator</code>
    </DeprecatedMethod>
    <EmptyArrayAccess>
      <code><![CDATA[$object['get'][0]]]></code>
    </EmptyArrayAccess>
    <InvalidArgument>
      <code><![CDATA[[
            'factories' => [
                stdClass::class => static function (ServiceLocatorInterface $serviceLocator, $className): stdClass {
                    self::assertEquals(stdClass::class, $className);

                    return new stdClass();
                },
            ],
        ]]]></code>
      <code><![CDATA[[
            'factories' => [
                stdClass::class => static function (ServiceLocatorInterface $serviceLocator, $className): stdClass {
                    self::assertEquals(stdClass::class, $className);

                    return new stdClass();
                },
            ],
        ]]]></code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[$config['shared']]]></code>
    </InvalidArrayOffset>
    <MissingClosureParamType>
      <code>$callback</code>
      <code>$className</code>
      <code>$container</code>
      <code>$container</code>
      <code>$instance</code>
      <code>$instance</code>
      <code>$name</code>
      <code>$requestedName</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($container, $name, $callback) {</code>
    </MissingClosureReturnType>
    <MixedArrayAssignment>
      <code><![CDATA[$object[$shared ? $method : 'build'][]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code>$names[$name]</code>
      <code><![CDATA[$object[$shared ? $method : 'build']]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$first</code>
      <code>$idx1</code>
      <code>$idx2</code>
      <code>$instance</code>
      <code>$method</code>
      <code>$name</code>
      <code>$names[$name]</code>
      <code>$nonSharedObj1</code>
      <code>$nonSharedObj2</code>
      <code>$obj</code>
      <code>$object1</code>
      <code>$object1</code>
      <code>$object1</code>
      <code>$object1</code>
      <code>$object2</code>
      <code>$object2</code>
      <code>$object2</code>
      <code>$object2</code>
      <code><![CDATA[$object[$shared ? $method : 'build'][]]]></code>
      <code>$second</code>
      <code>$shared</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$callback()</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedPropertyAssignment>
      <code>$instance</code>
    </MixedPropertyAssignment>
    <PossiblyUndefinedVariable>
      <code>$object</code>
    </PossiblyUndefinedVariable>
    <TooManyArguments>
      <code>has</code>
    </TooManyArguments>
    <UnusedClosureParam>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$container</code>
      <code>$name</code>
      <code>$options</code>
      <code>$requestedName</code>
      <code>$serviceLocator</code>
    </UnusedClosureParam>
  </file>
  <file src="test/ConfigTest.php">
    <DeprecatedClass>
      <code>new Config($config)</code>
    </DeprecatedClass>
    <MixedAssignment>
      <code>$configInstance</code>
      <code>$configuration</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>toArray</code>
    </MixedMethodCall>
  </file>
  <file src="test/Exception/CyclicAliasExceptionTest.php">
    <InvalidDocblock>
      <code>public static function aliasesProvider(): array</code>
      <code>public static function cyclicAliasProvider(): array</code>
    </InvalidDocblock>
    <MixedInferredReturnType>
      <code><![CDATA[array<
     *     non-empty-string,
     *     array{0:non-empty-string,1:array<non-empty-string,non-empty-string>,non-empty-string}
     * >]]></code>
      <code><![CDATA[array<string, array{0: array<string, string>, string}>]]></code>
    </MixedInferredReturnType>
  </file>
  <file src="test/LazyServiceIntegrationTest.php">
    <InvalidReturnStatement>
      <code>array_filter(spl_autoload_functions(), $filter)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>AutoloaderInterface[]</code>
    </InvalidReturnType>
    <MissingClosureParamType>
      <code>$autoload</code>
    </MissingClosureParamType>
    <RedundantCondition>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
    </RedundantCondition>
  </file>
  <file src="test/Proxy/LazyServiceFactoryTest.php">
    <InvalidArgument>
      <code><![CDATA[[$callback, 'callback']]]></code>
      <code><![CDATA[[$callback, 'callback']]]></code>
    </InvalidArgument>
    <MissingClosureParamType>
      <code>$className</code>
      <code>$initializer</code>
    </MissingClosureParamType>
    <MixedFunctionCall>
      <code>$initializer($wrappedInstance, $proxy)</code>
    </MixedFunctionCall>
    <UnusedVariable>
      <code>$wrappedInstance</code>
    </UnusedVariable>
  </file>
  <file src="test/ServiceManagerTest.php">
    <MissingClosureParamType>
      <code>$context</code>
      <code>$context</code>
      <code>$name</code>
    </MissingClosureParamType>
    <MixedAssignment>
      <code>$a</code>
      <code>$alias</code>
      <code>$alias</code>
      <code>$b</code>
      <code>$headAlias</code>
      <code>$inc</code>
      <code>$inc</code>
      <code>$instance</code>
      <code>$instance1</code>
      <code>$instance1</code>
      <code>$instance2</code>
      <code>$instance2</code>
      <code>$service</code>
      <code>$service</code>
      <code>$service</code>
      <code>$serviceFromAlias</code>
      <code>$serviceFromServiceNameAfterUsingAlias</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code>$inc</code>
    </MixedOperand>
    <MixedPropertyFetch>
      <code><![CDATA[$instance->foo]]></code>
      <code><![CDATA[$instance->option]]></code>
    </MixedPropertyFetch>
    <PossiblyUnusedMethod>
      <code>sampleFactory</code>
    </PossiblyUnusedMethod>
    <UnusedClosureParam>
      <code>$container</code>
      <code>$container</code>
      <code>$context</code>
      <code>$context</code>
      <code>$name</code>
      <code>$name</code>
    </UnusedClosureParam>
  </file>
  <file src="test/StaticAnalysis/ServiceManagerConfiguration.php">
    <UnusedClass>
      <code>ServiceManagerConfiguration</code>
    </UnusedClass>
  </file>
  <file src="test/Tool/ConfigDumperCommandTest.php">
    <MixedArgument>
      <code>$factoryConfig[ObjectWithObjectScalarDependency::class]</code>
      <code>$factoryConfig[ObjectWithObjectScalarDependency::class]</code>
      <code>$factoryConfig[SimpleDependencyObject::class]</code>
      <code>$factoryConfig[SimpleDependencyObject::class]</code>
      <code>$factoryConfig[SimpleDependencyObject::class]</code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <UnresolvableInclude>
      <code>include $config</code>
      <code>include $config</code>
      <code>include $config</code>
    </UnresolvableInclude>
  </file>
  <file src="test/Tool/ConfigDumperTest.php">
    <MixedAssignment>
      <code>$test</code>
    </MixedAssignment>
    <UnresolvableInclude>
      <code>include $file</code>
    </UnresolvableInclude>
  </file>
  <file src="test/Tool/FactoryCreatorCommandTest.php">
    <MixedArgument>
      <code>ConfigDumperCommand::class</code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
    <UndefinedClass>
      <code>ConfigDumperCommand</code>
    </UndefinedClass>
  </file>
</files>
